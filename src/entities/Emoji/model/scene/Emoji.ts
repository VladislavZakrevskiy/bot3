import { Scenes } from "telegraf";
import { message } from "telegraf/filters";
import prisma from "../../../../shared/db/prisma";

export const getEmojiScene = () => {
	try {
		const question = new Scenes.BaseScene("emoji");
		question.enter((ctx) =>
			ctx.reply(
				"–ù–∞ –∫–∞–∫–æ–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –æ–±—ã—á–Ω—ã–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä—è–¥ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è \n–ù–∞–ø—Ä–∏–º–µ—Ä, üò≠üòîüòêüòÄüòÅ"
			)
		);
		question.on(message("text"), async (ctx) => {
			const user = await prisma.user.findUnique({ where: { user_id: ctx.from.id } });
			if (!user) {
				ctx.reply(
					"–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
				);

				//@ts-ignore
				return ctx.scene.leave();
			}

			const emojis = Buffer.from(ctx.message.text, "utf8").toJSON().data;
			const result = [];
			for (let i = 0; i < emojis.length; i += 4) {
				result.push(Buffer.from([emojis[i], emojis[i + 1], emojis[i + 2], emojis[3 + i]]));
			}
			ctx.reply(result.map((value) => value.toString("utf-8")).join(""));

			user.emoji_pack = result;

			await prisma.user.update({ where: { user_id: user.user_id }, data: user });
			await ctx.reply("–û—Ç–ª–∏—á–Ω–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª");
			//@ts-ignore
			return ctx.scene.leave();
		});

		return question;
	} catch (e) {
		console.log(e);
	}
};
